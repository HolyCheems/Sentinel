@model Sentinel.Views.ParkingLot.ParkingLot
@{
    Layout = "~/Views/ParkingLot/_ParkingLot.cshtml";
}
@section Buttons {
    <div class="panel panel-default">
        <div class="panel-heading">
            Statistics
        </div>
        <table class="panel-body table">
            <tr>
                <th class="bg-success">Available Standard Spaces</th>
                <td id="availableSpaces" class="bg-success">...</td>
            </tr>
            <tr>
                <th class="bg-primary">Available Handicap Spaces</th>
                <td id="handicapSpaces" class="bg-primary">...</td>
            </tr>
            <tr>
                <th class="bg-light">Available Motorcycle Spaces</th>
                <td id="motorcycleSpaces" class="bg-light">...</td>
            </tr>
            <tr>
                <th class="bg-danger">Occupied</th>
                <td id="occupiedSpaces" class="bg-danger">...</td>
            </tr>
            <tr>
                <th class="bg-warning">Partially Obstructed</th>
                <td id="partialSpaces" class="bg-warning">...</td>
            </tr>
            <tr>
                <th>Total Spaces</th>
                <td id="totalSpaces">...</td>
            </tr>
        </table>
    </div>
    <div id="problem_check" class="panel panel-default" display="none">
        <div class="panel panel-heading">
            Problem
        </div>
        <div class="panel-body">
            <label>The camera needs to be reset.</label>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            Debug
        </div>
        <div class="panel-body">
            <label>Partially Obstructed Threshold:</label>
            <input class="form-control" type="range" min="0" max="1" step=".01" value="0.1" id="partiallyObstructedThreshold" />
            <label>Obstructed Threshold:</label>
            <input class="form-control" type="range" min="0" max="1" step=".01" value="0.25" id="obstructedThreshold" />
        </div>
    </div> 
}
@section scripts {
    <script>
	let viewer = null;
	function createPath() {
		viewer.setPath(viewer.aStar(new Vector2(1,1), viewer.lot.Annotations[6].midpoints));
	}
	function updateViewer() {
		$.ajax({
			url: '/ParkingLot/Get',
			data: { id:@Model.ID}
		}).done(lot => {
			// Convert annotation points into Vector2 instances
			let annotationModels = lot.Annotations;
			lot.Annotations = [];
			annotationModels.forEach(a => {
				let annotation = new Annotation(a);
				let points = annotation.Points;
				annotation.Points = [];
				points.forEach(p => {
					annotation.Points.push(new Vector2(p.X, p.Y));
				});
				lot.Annotations.push(annotation);
			});

			if (viewer === null) {
				// create a new viewer
				viewer = new AnnotationViewer(lot, annotations, (self, ctx, annotation) => {
					ctx.lineWidth = 1;
					if (viewer.goal && annotation.ID === viewer.goal.ID) {
						ctx.strokeStyle = 'blue';
						ctx.lineWidth = 8;
					} else {
						ctx.strokeStyle = 'black';

					}
					if (annotation.Type === 'Standard') {
						if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,0,0,0.3)';
						} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,255,0,0.3)';
						} else {
							ctx.fillStyle = 'rgba(0,255,0,0.3)';
						}

						return true;
                    }

                    else if (annotation.Type === 'Handicap') {
						if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,0,0,0.3)';
						} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,255,0,0.3)';
						} else {
							ctx.fillStyle = 'rgba(0,0,255,0.3)';
						}

						return true;
                    }

					else if (annotation.Type === 'Motorcycle') {
						if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,0,0,0.3)';
						} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
							ctx.fillStyle = 'rgba(255,255,0,0.3)';
						} else {
							ctx.fillStyle = 'rgba(255,165,0,0.3)';
						}

						return true;
                    }

                    else if (annotation.Type === 'Aisle') {
						ctx.fillStyle = 'rgba(187,0,255,0.2)';
						return true;
					} else {
						return false;
					}

				}, (self, ctx, annotation, point) => {
					if (point === self.start) {
						ctx.fillStyle = 'blue';
						ctx.strokeStyle = 'blue';
						ctx.lineWidth = 16;
						return true;
					} else {
						return false;
					}

					});
				annotations.addEventListener('click', (evt) => {
					let pos = new Vector2(evt.offsetX / annotations.width, evt.offsetY / annotations.height);
					let target = viewer.lot.Annotations.find(an => an.contains(pos) && an.Type !== "Aisle");
					if (target) {
						viewer.goal = target;
					} else {
						viewer.start = pos;
					}
				});
				viewer.tick();
				// load the feed
				displayFeed();
			} else {
				// update the existing viewer's lot
				viewer.lot = lot;
			}
			// Update statistics
			let total = 0;
            let available = 0;
            let handicap = 0; // initializing handicap
			let motorcycle = 0;
			let occupied = 0;
            let partial = 0;
			let hhh = "Not Available";
            let count = 0;
            let against = 0;

            // Will display a gui and grey out screen if camera obstructed
            lot.Annotations.forEach(annotation => {
                if (annotation.Type === 'Constant') {
                    if (annotation.PercentDifference >= 0.1) {
                        count++;
                    }
                    against++;
                }
            });

			lot.Annotations.forEach(annotation => {
				if (annotation.Type === 'Standard') {
					total++;
					if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
						occupied++;
					} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
						partial++;
					} else {
						available++;
					}
                }

                else if (annotation.Type === 'Handicap') {
					total++;
					if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
						occupied++;
					} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
						partial++;
					} else {
						handicap++;
					}
                }

				else if (annotation.Type === 'Motorcycle') {
					total++;
					if (annotation.PercentDifference > document.getElementById('obstructedThreshold').value) {
						occupied++;
					} else if (annotation.PercentDifference > document.getElementById('partiallyObstructedThreshold').value) {
						partial++;
					} else {
						motorcycle++;
					}
                }


            });

            if (count == against) {
                document.getElementById("problem_check").style.display = "block";
				document.getElementById('availableSpaces').innerHTML = hhh;
				document.getElementById('handicapSpaces').innerHTML = hhh;
				document.getElementById('motorcycleSpaces').innerHTML = hhh;
				document.getElementById('occupiedSpaces').innerHTML = hhh;
				document.getElementById('partialSpaces').innerHTML = hhh;
				document.getElementById('totalSpaces').innerHTML = hhh;
			}else{
				document.getElementById("problem_check").style.display = "none";
				document.getElementById('availableSpaces').innerHTML = available;
				document.getElementById('handicapSpaces').innerHTML = handicap;
				document.getElementById('motorcycleSpaces').innerHTML = motorcycle;
				document.getElementById('occupiedSpaces').innerHTML = occupied;
				document.getElementById('partialSpaces').innerHTML = partial;
				document.getElementById('totalSpaces').innerHTML = total;
			}

			window.setTimeout(() => {
				updateViewer();
			}, 500);
		});
	}
	updateViewer();
    </script>
}